@model opr.Models.Subject
@{
    ViewBag.Title = "Create";
}

<h2>Add New Subject</h2>
<div class="container">
    <div class="row">
        <div class="col">
            @using (Html.BeginForm())
            {
                <form class="form-horizontal" action="/action_page.php">
                    <div class="form-group">
                        <label class="control-label col-sm-4" for="email">Subject Name:</label>
                        <div class="col-sm-10">
                            @Html.TextBoxFor(m => m.Subject_Name, new { required = "required", type = "text", placeholder = "Enter subject name", @class = "form-control" })

                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-sm-4" for="email">Entry Date</label>
                        <div class="col-sm-10">
                            @* @Html.TextBoxFor(m => m.EntryDate, new { type = "date", @class = "form-control" })*@
                            <input type="datetime" name="EntryDate" value=" @ViewBag.entrydate " />
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-sm-4" for="email">Modified By: </label>
                        <div class="col-sm-10">
                            @*@Html.TextBoxFor(m => m.ModifiedBy, new { required = "required", type = "text", placeholder = "Enter modified by", @class = "form-control" })*@
                            <input type="text" name="ModifiedBy" value=" @ViewBag.UserId " />
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-sm-4" for="email">User ID: </label>
                        <div class="col-sm-10">
                            <input type="text" name="UserId" value=" @ViewBag.UserId " />
                            @* @Html.TextBoxFor(m => m.UserId, new { required = "required", type = "text", placeholder = "Enter user Id", @class = "form-control" })*@

                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-sm-4" for="email">Modified Date: </label>
                        <div class="col-sm-10">
                            @* @Html.TextBoxFor(m => m.ModifiedDate, new { required = "required", type = "date", placeholder = "Enter modified date", @class = "form-control" })*@
                            <input type="datetime" name="ModifiedDate" value=" @ViewBag.entrydate " />
                        </div>
                    </div>

                    @*<div class="form-group">
                            <label class="control-label col-sm-4" for="email">IsDelete:</label>
                            <div class="col-sm-10">
                                <label>
                                    Is Delete :True
                                    @Html.RadioButtonFor(s => s.IsActive, "1")
                                </label>
                                <label>False: @Html.RadioButtonFor(s => s.IsActive, "0")</label>
                            </div>
                        </div>*@
                    <div class="form-group">
                        <label class="control-label col-sm-4" for="pwd">Description:</label>
                        <div class="col-sm-10">
                            @Html.TextBoxFor(m => m.Subject_Description, new { required = "required", type = "text", placeholder = "Enter subject Description", @class = "form-control" })

                        </div>
                    </div>

                    @*  <label>
                            Is Active :True
                            @Html.RadioButtonFor(s => s.IsActive, "1")
                        </label>
                        <label>False: @Html.RadioButtonFor(s => s.IsActive, "0")</label>
                    *@
                    <div class="form-group">
                        <div class=" col-sm-2">
                            <button type="submit" class="btn btn-block">Submit</button>
                        </div>
                    </div>
                </form>
            }

        </div>

    </div>

</div>
<div>
    <p class="well-sm">@Html.ActionLink("Go Back", "Index")</p>
</div>


@*

    Main Index
    @model  opr.Models.Section
    @{
        ViewBag.Title = "Index";
    }

    <h2>Index</h2>

    @using (Html.BeginForm())
    {
        <div>
            <form>

                <label for="name">Section Name</label>
                @Html.TextBoxFor(model => model.Name, new { required = "required", @class = "form-control" })
                <label for="shortcode">Section Short Code</label>
                @Html.TextBoxFor(model => model.ShortCode, new { required = "required", @class = "form-control" })
                <label for="description">Description</label>
                @Html.TextBoxFor(model => model.Description, new { required = "required", @class = "form-control" })
                @*<label for="userid">User Id</label>
<input type="hidden" name="UserId" value="@ViewBag.InitialValue">
<input type="hidden" name="EntryDate" value=@ViewBag.DateTime>
<input type="hidden" name="ModifiedBy" value="@ViewBag.InitialValue">
<input type="hidden" name="ModifiedDate" value=@ViewBag.DateTime>
<label for="isdeleted">Is Deleted</label>
@Html.CheckBox("IsDeleted", Model.IsDeleted.HasValue ? Model.IsDeleted : false)
<label for="isactive">Is Active</label>
@Html.CheckBox("IsActive", Model.IsActive.HasValue ? Model.IsActive : false)

<br />
<br />
<input type="submit" value="submit" />
        </form>

    </div>

}
Controler
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using ExamSystem.Models;

namespace ExamSystem.Controllers
{
    public class HomeController : Controller
    {
        public ActionResult Index()

        {
            return View();
        }

        [HttpPost]
        public ActionResult Index(ExamSystem.Models.SchoolTable model)

        {
            ExamSystemEntities db = new ExamSystemEntities();
            db.SchoolTables.Add(model);
            db.SaveChanges();

            return View();
        }
        public ActionResult SchoolDetail()
        {
            Models.ExamSystemEntities db = new ExamSystemEntities();
        //    IList<Models.SchoolTable>
   // model = new List<SchoolTable>
        ();
        model = db.SchoolTables.ToList();

        return View(model);

        }

       
        public ActionResult DeleteData(int id)
        {
        Models.ExamSystemEntities db = new ExamSystemEntities();
        SchoolTable Schooldt = db.SchoolTables.Find(id);

        db.SchoolTables.Remove(Schooldt);
        db.SaveChanges();
        return RedirectToAction("SchoolDetail");
        }
        public ActionResult EditView(int id)
        {
        Models.ExamSystemEntities db = new ExamSystemEntities();
        SchoolTable Schooldt = db.SchoolTables.Find(id);
        return View(Schooldt);
        }
        [HttpPost]
        public ActionResult EditView(ExamSystem.Models.SchoolTable model)
        {
        Models.ExamSystemEntities db = new ExamSystemEntities();
        db.Entry(model).State = System.Data.Entity.EntityState.Modified;
        try
        {

        db.SaveChanges();
        return RedirectToAction("SchoolDetail");
        }
        catch
        {

        }
        ModelState.AddModelError("", "Unable to save changes");
        return View(model);
        }
       
        public ActionResult ProductSite()

        {
        return View();
        }
        public ActionResult Test()

        {
        return View();
        }
        }
        }

        *@
